{"version":3,"file":"static/chunks/pages/shapes-585e6e9571540c88.js","mappings":"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","sources":["webpack://_N_E/?e263","webpack://_N_E/./modules/webgl-utils.ts","webpack://_N_E/./pages/shapes/index.tsx","webpack://_N_E/./pages/shapes/shaders/ellipse-vertex.glsl","webpack://_N_E/./pages/shapes/shaders/ellipse-fragment.glsl","webpack://_N_E/./pages/shapes/shapes_page_style.module.css"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/shapes\",\n      function () {\n        return require(\"private-next-pages/shapes/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/shapes\"])\n      });\n    }\n  ","/** Create the WebGL program for the given context and shaders */\nfunction createProgram(\n  gl: WebGLRenderingContext,\n  vertexShader: string,\n  fragmentShader: string\n): WebGLProgram {\n  // Enable depth test and blending\n  gl.enable(gl.DEPTH_TEST);\n  gl.enable(gl.BLEND);\n  gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\n  // Create vertex shader\n  const vs = gl.createShader(gl.VERTEX_SHADER)!;\n  gl.shaderSource(vs, vertexShader);\n  gl.compileShader(vs);\n\n  // Create fragment shader\n  const fs = gl.createShader(gl.FRAGMENT_SHADER)!;\n  gl.shaderSource(fs, fragmentShader);\n  gl.compileShader(fs);\n\n  // Link\n  const program = gl.createProgram()!;\n  gl.attachShader(program, fs);\n  gl.attachShader(program, vs);\n  gl.linkProgram(program);\n  gl.useProgram(program);\n\n  return program;\n}\n\n/** Create, bind, and enable a vertex attribute */\nfunction setVertexAttribute(\n  gl: WebGLRenderingContext,\n  program: WebGLProgram,\n  name: string,\n  size: number,\n  data: number[]\n): void {\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\n\n  const location = gl.getAttribLocation(program, name);\n  gl.vertexAttribPointer(location, size, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(location);\n}\n\n/** Create and bind the indices */\nfunction setIndices(gl: WebGLRenderingContext, data: number[]): void {\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.STATIC_DRAW);\n}\n\n/** Clear the WebGL context */\nfunction clear(gl: WebGLRenderingContext): void {\n  gl.clearColor(0.0, 0.0, 0.0, 0.0);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n}\n\n/** Render the WebGL context on the canvas */\nfunction draw(gl: WebGLRenderingContext, canvas: HTMLCanvasElement, nIndices: number): void {\n  gl.viewport(0, 0, canvas.width, canvas.height);\n  gl.drawElements(gl.TRIANGLES, nIndices, gl.UNSIGNED_SHORT, 0);\n}\n\nexport { clear, createProgram, draw, setIndices, setVertexAttribute };\n","import type { NextPage } from \"next\";\nimport { useEffect, useRef } from \"react\";\nimport styles from \"./shapes_page_style.module.css\";\nimport vertexShader from \"./shaders/ellipse-vertex.glsl\";\nimport fragmentShader from \"./shaders/ellipse-fragment.glsl\";\nimport {\n  clear,\n  createProgram,\n  draw,\n  setIndices,\n  setVertexAttribute,\n} from \"../../modules/webgl-utils\";\n\nconst CANVAS_WIDTH = 800;\nconst CANVAS_HEIGHT = 640;\nconst RECT_VERTICES = [0, 0, 1, 0, 0, 1, 1, 1];\nconst RECT_INDICES = [0, 1, 2, 3, 2, 1];\n\nfunction experiment1(canvas: HTMLCanvasElement) {\n  const gl = canvas.getContext(\"webgl\");\n\n  if (!gl) return;\n\n  canvas.width = CANVAS_WIDTH;\n  canvas.height = CANVAS_HEIGHT;\n\n  const positionData: number[] = [];\n  const scaleData: number[] = [];\n  const translateData: number[] = [];\n  const depthData: number[] = [];\n  const strokeWidthData: number[] = [];\n  const strokeColorData: number[] = [];\n  const fillColorData: number[] = [];\n  const indexData: number[] = [];\n\n  let nEllipses = 0;\n\n  function ellipse(options: {\n    scale: [number, number];\n    translate: [number, number];\n    depth: number;\n    strokeWidth: number;\n    strokeColor: [number, number, number, number];\n    fillColor: [number, number, number, number];\n  }) {\n    // Push the bounding box vertices to the position buffer\n    positionData.push(...RECT_VERTICES);\n\n    // Push the indices, with an offset by n. of vertices at every new ellipse\n    indexData.push(...RECT_INDICES.map((index) => 4 * nEllipses + index));\n\n    // Push 4 identical copies of the attributes, one for every vertex\n    for (let i = 0; i < 4; i++) {\n      scaleData.push(...options.scale);\n      translateData.push(...options.translate);\n      depthData.push(options.depth);\n      strokeWidthData.push(options.strokeWidth);\n      strokeColorData.push(...options.strokeColor);\n      fillColorData.push(...options.fillColor);\n    }\n\n    // Increment n. of ellipses in the scene by 1\n    nEllipses += 1;\n  }\n\n  ellipse({\n    scale: [0.9, 0.3],\n    translate: [-0.1, 0.5],\n    depth: -0.1,\n    strokeWidth: 0.01,\n    strokeColor: [1.0, 1.0, 1.0, 0.1],\n    fillColor: [0.75, 0.0, 0.0, 0.5],\n  });\n\n  ellipse({\n    scale: [0.8, 1.3],\n    translate: [-0.6, -0.4],\n    depth: -0.2,\n    strokeWidth: 0.03,\n    strokeColor: [1.0, 1.0, 1.0, 0.9],\n    fillColor: [0.0, 0.0, 0.75, 0.6],\n  });\n\n  ellipse({\n    scale: [1.5, 1.2],\n    translate: [-0.8, -0.8],\n    depth: -0.3,\n    strokeWidth: 0.02,\n    strokeColor: [1.0, 1.0, 1.0, 0.5],\n    fillColor: [0.0, 0.75, 0.0, 0.7],\n  });\n\n  const program = createProgram(gl, vertexShader, fragmentShader);\n\n  // Create buffers\n  setVertexAttribute(gl, program, \"position\", 2, positionData);\n  setVertexAttribute(gl, program, \"scale\", 2, scaleData);\n  setVertexAttribute(gl, program, \"translate\", 2, translateData);\n  setVertexAttribute(gl, program, \"depth\", 1, depthData);\n  setVertexAttribute(gl, program, \"strokeWidth\", 1, strokeWidthData);\n  setVertexAttribute(gl, program, \"strokeColor\", 4, strokeColorData);\n  setVertexAttribute(gl, program, \"fillColor\", 4, fillColorData);\n  setIndices(gl, indexData);\n\n  clear(gl);\n  draw(gl, canvas, indexData.length);\n}\n\nconst ShapesPage: NextPage = () => {\n  const canvas1 = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (canvas1.current) {\n      experiment1(canvas1.current);\n    }\n  }, []);\n\n  return (\n    <div>\n      <div>\n        <h2 className={styles.title}>Ellipses - Alpha blending, single draw call</h2>\n        <div className={styles.card}>\n          <canvas ref={canvas1} className={styles.canvas} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ShapesPage;\n","export default \"#define GLSLIFY 1\\nattribute vec2 position;\\nattribute vec2 scale;\\nattribute vec2 translate;\\nattribute float depth;\\nattribute float strokeWidth;\\nattribute vec4 fillColor;\\nattribute vec4 strokeColor;\\n\\nvarying vec2 vOuterPosition;\\nvarying vec2 vInnerPosition;\\nvarying vec4 vFillColor;\\nvarying vec4 vStrokeColor;\\n\\nvoid main() {\\n    vec2 uv = (position - 0.5) * scale;\\n    vec2 outerRatio = scale * 0.5;\\n    vec2 innerRatio = outerRatio - strokeWidth;\\n\\n    vOuterPosition = uv / outerRatio;\\n    vInnerPosition = uv / innerRatio;\\n    vFillColor = fillColor;\\n    vStrokeColor = strokeColor;\\n\\n    gl_Position = vec4(position * scale + translate, depth, 1);\\n}\\n\";","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec2 vOuterPosition;\\nvarying vec2 vInnerPosition;\\nvarying vec4 vFillColor;\\nvarying vec4 vStrokeColor;\\n\\nvoid main() {\\n    if (dot(vInnerPosition, vInnerPosition) < 1.0) {\\n        gl_FragColor = vFillColor;\\n    } else if (dot(vOuterPosition, vOuterPosition) < 1.0) {\\n        float alphaSum = 2.0 - vStrokeColor.a;\\n        vec4 blend = vStrokeColor + vFillColor * (1.0 - vStrokeColor.a);\\n        gl_FragColor = vec4(blend.rgb / alphaSum, blend.a);\\n    } else {\\n        discard;\\n    }\\n}\\n\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"shapes_page_style_title__1lsqX\",\"card\":\"shapes_page_style_card__Nyh_7\",\"canvas\":\"shapes_page_style_canvas__sD12n\",\"option\":\"shapes_page_style_option__sY0PE\"};"],"names":["window","__NEXT_P","push","createProgram","gl","vertexShader","fragmentShader","enable","DEPTH_TEST","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","vs","createShader","VERTEX_SHADER","shaderSource","compileShader","fs","FRAGMENT_SHADER","program","attachShader","linkProgram","useProgram","setVertexAttribute","name","size","data","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","location","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","setIndices","ELEMENT_ARRAY_BUFFER","Uint16Array","clear","clearColor","COLOR_BUFFER_BIT","draw","canvas","nIndices","viewport","width","height","drawElements","TRIANGLES","UNSIGNED_SHORT","RECT_VERTICES","RECT_INDICES","canvas1","useRef","useEffect","current","ellipse","options","positionData","indexData","map","index","nEllipses","i","scaleData","translateData","strokeColorData","fillColorData","scale","translate","depthData","depth","strokeWidthData","strokeWidth","strokeColor","fillColor","getContext","length","experiment1","div","h2","className","styles","ref","module","exports"],"sourceRoot":""}